@page "/categories"
@using MahnaMahna.Client.Services
@inject ITodoApiService _api

<h3>Category Manager</h3>

@if (categories == null)
{
    <p>Loading...</p>
}
else
{
    <div class="mb-3">
        <input type="text" class="form-control" placeholder="New category name" @bind="newCategoryName" />
        <button class="btn btn-primary mt-2" @onclick="AddCategory">Add Category</button>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td>
                        @if (editCategoryId == category.Id)
                        {
                            <input type="text" class="form-control" @bind="category.Name" />
                        }
                        else
                        {
                            @category.Name
                        }
                    </td>
                    <td>
                        @if (editCategoryId == category.Id)
                        {
                            <button class="btn btn-success" @onclick="() => UpdateCategory(category)">Save</button>
                            <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="() => EditCategory(category.Id)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteCategory(category.Id)">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Category> categories;
    private string newCategoryName;
    private int? editCategoryId;

    protected override async Task OnInitializedAsync()
    {
        categories = await _api.GetCategoriesAsync();
    }

    private async Task AddCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategoryName))
        {
            var newCategory = new Category { Name = newCategoryName };
            await _api.CreateCategoryAsync(newCategory);
            categories = await _api.GetCategoriesAsync();
            newCategoryName = string.Empty;
        }
    }

    private void EditCategory(int id)
    {
        editCategoryId = id;
    }

    private async Task UpdateCategory(Category category)
    {
        if (editCategoryId.HasValue)
        {
            await _api.UpdateCategoryAsync(category);
            editCategoryId = null;
            categories = await _api.GetCategoriesAsync();
        }
    }

    private void CancelEdit()
    {
        editCategoryId = null;
    }

    private async Task DeleteCategory(int id)
    {
        await _api.DeleteCategoryAsync(id);
        categories = await _api.GetCategoriesAsync();
    }
}
