@page "/Items/{Id:int}"
@inject ITodoApiService _api
@inject NavigationManager _manager
@inject IJSRuntime _jsruntime

<h2>Edit Todo Item</h2>

@if (todoItem == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@todoItem" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="text" class="form-label">Text</label>
            <InputText id="text" class="form-control" @bind-Value="todoItem.Text" />
        </div>

        <div class="mb-3">
            <label for="state" class="form-label">State</label>
            <InputSelect id="state" class="form-select" @bind-Value="todoItem.State">
                @foreach (var state in Enum.GetValues(typeof(TodoItemState)).Cast<TodoItemState>())
                {
                    <option value="@state">@state</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <h3>Categories</h3>
            <div>
                @foreach (var category in allCategories)
                {
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" id="@category.Id" @onchange="@(e => ToggleCategory(e, category))" checked="@todoItem.Categories.Any(i=>i.Id==category.Id)" />
                        <label class="form-check-label" for="@category.Id">@category.Name</label>
                    </div>
                }
            </div>
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-danger" @onclick="DeleteAsync">Delete</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </EditForm>
}

@code
{
    [Parameter]
    public int Id { get; set; }

    private TodoItem todoItem;
    private List<Category> allCategories;

    protected override async Task OnInitializedAsync()
    {
        allCategories = await _api.GetCategoriesAsync();
    }

    private async Task HandleValidSubmit()
    {
        await _api.UpdateTodoItemAsync(todoItem);
        _manager.NavigateTo("/list");
    }

    private void Cancel()
    {
        _manager.NavigateTo("/list");
    }

    private async Task DeleteAsync()
    {
        if (await _jsruntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?"))
        {
            await _api.DeleteTodoItemAsync(todoItem.Id);
            _manager.NavigateTo("/list");
        }
        
    }

    private void ToggleCategory(ChangeEventArgs e, Category category)
    {
        if ((bool)e.Value)
        {
            if (!todoItem.Categories.Any(c => c.Id == category.Id))
            {
                todoItem.Categories.Add(category);
            }
        }
        else
        {
            if (todoItem.Categories.Any(c => c.Id == category.Id))
            {
                var todoCategory = todoItem.Categories.First(c => c.Id == category.Id);
                if (todoCategory != null)
                {
                    todoItem.Categories.Remove(todoCategory);
                }
            }
        }
    }

    protected async override Task OnParametersSetAsync()
    {
        todoItem = await _api.GetTodoItemByIdAsync(Id);
        await base.OnParametersSetAsync();
    }
}